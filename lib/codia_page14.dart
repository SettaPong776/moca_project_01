import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:codia_demo_flutter/codia_page.dart';
import 'package:codia_demo_flutter/codia_page15.dart';

class CodiaPage14 extends StatefulWidget {
  const CodiaPage14({super.key});

  @override
  State<CodiaPage14> createState() => _CodiaPageState14();
}

class _CodiaPageState14 extends State<CodiaPage14> {
  final Map<String, List<String>> wordMap = {
    '‡∏Å‡∏≤‡∏ô‡πâ‡∏≥‡∏£‡πâ‡∏≠‡∏ô': ['‡∏Å'],
    '‡∏Å‡∏≤‡πÅ‡∏ü': ['‡∏Å'],
    '‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤': ['‡∏Å'],
    '‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©': ['‡∏Å'],
    '‡∏Å‡∏•‡∏≠‡∏á': ['‡∏Å'],
    '‡πÄ‡∏Å‡πâ‡∏≤‡∏≠‡∏µ‡πâ': ['‡∏Å'],
    '‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á': ['‡∏Å'],
    '‡∏Å‡∏£‡∏∞‡πÇ‡∏õ‡∏£‡∏á': ['‡∏Å'],
    '‡∏Å‡∏∏‡∏´‡∏•‡∏≤‡∏ö': ['‡∏Å'],
    '‡∏Å‡∏•‡πâ‡∏ß‡∏¢': ['‡∏Å'],
    '‡∏Å‡∏•‡πâ‡∏≠‡∏á': ['‡∏Å'],
    '‡πÅ‡∏Å‡∏á': ['‡∏Å'],
    '‡πÅ‡∏Å‡πâ‡∏ß': ['‡∏Å'],
    '‡∏Å‡∏∞‡∏´‡∏•‡πà‡∏≥‡∏õ‡∏•‡∏µ': ['‡∏Å'],
    '‡∏Ç‡∏ô‡∏°': ['‡∏Ç'],
    '‡∏Ç‡∏ß‡∏î': ['‡∏Ç'],
    '‡∏Ç‡πâ‡∏≤‡∏ß': ['‡∏Ç'],
    '‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á': ['‡∏Ç'],
    '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°': ['‡∏Ç'],
    '‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î': ['‡∏Ç'],
    '‡∏Ç‡∏ô‡∏°‡∏à‡∏µ‡∏ö': ['‡∏Ç'],
    '‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß': ['‡∏Ç'],
    '‡∏Ç‡∏≤': ['‡∏Ç'],
    '‡∏Ç‡∏≤‡∏ß': ['‡∏Ç'],
    '‡∏Ç‡∏ô‡∏°‡πÄ‡∏Ñ‡πâ‡∏Å': ['‡∏Ç'],
    '‡∏Ç‡∏µ‡πâ‡πÄ‡∏ñ‡πâ‡∏≤': ['‡∏Ç'],
    '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå': ['‡∏Ñ'],
    '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà': ['‡∏Ñ'],
    '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏±‡πà‡∏ô': ['‡∏Ñ'],
    '‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î': ['‡∏Ñ'],
    '‡∏Ñ‡∏£‡∏µ‡∏°': ['‡∏Ñ'],
    '‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå': ['‡∏Ñ'],
    '‡∏Ñ‡∏ß‡∏±‡∏ô': ['‡∏Ñ'],
    '‡∏Ñ‡πà‡∏≤‡∏¢': ['‡∏Ñ'],
    '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î': ['‡∏Ñ'],
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å': ['‡∏Ñ'],
    '‡∏Ñ‡∏°‡∏ô‡∏≤‡∏Ñ‡∏°': ['‡∏Ñ'],
    '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏®‡∏Å': ['‡∏Ñ'],
    '‡∏Ñ‡∏∏‡∏Å': ['‡∏Ñ'],
    '‡∏Ñ‡∏∞‡∏ô‡πâ‡∏≤': ['‡∏Ñ'],
    '‡∏á‡∏π': ['‡∏á'],
    '‡∏á‡πà‡∏ß‡∏á': ['‡∏á'],
    '‡∏á‡∏≤‡∏°': ['‡∏á'],
    '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì': ['‡∏á'],
    '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå': ['‡∏à'],
    '‡∏à‡∏≠': ['‡∏à'],
    '‡∏à‡∏≤‡∏ô': ['‡∏à'],
    '‡∏à‡∏¥‡πâ‡∏°': ['‡∏à'],
    '‡∏à‡πà‡∏≤‡∏¢': ['‡∏à'],
    '‡∏à‡∏≠‡∏°‡∏õ‡∏•‡∏ß‡∏Å': ['‡∏à'],
    '‡πÄ‡∏à‡∏•': ['‡∏à'],
    '‡πÄ‡∏à‡πâ‡∏≤‡∏ô‡∏≤‡∏¢': ['‡∏à'],
    '‡∏à‡∏£‡∏ß‡∏î': ['‡∏à'],
    '‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå': ['‡∏£'],
    '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô': ['‡∏£'],
    '‡∏£‡πà‡∏°': ['‡∏£'],
    '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤': ['‡∏£'],
    '‡πÄ‡∏£‡∏∑‡∏≠': ['‡∏£'],
    '‡∏£‡∏±‡∏á': ['‡∏£'],
    '‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏°': ['‡∏£'],
    '‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢': ['‡∏£'],
    '‡∏£‡∏≤‡∏Å': ['‡∏£'],
    '‡∏£‡∏±‡∏á‡∏™‡∏¥‡∏ï': ['‡∏£'],
    '‡∏•‡∏¥‡∏ü‡∏ï‡πå': ['‡∏•'],
    '‡∏•‡∏ß‡∏î': ['‡∏•'],
    '‡∏•‡∏≥‡πÇ‡∏û‡∏á': ['‡∏•'],
    '‡∏•‡∏ö': ['‡∏•'],
    '‡∏•‡∏∞‡∏≠‡∏≠‡∏á': ['‡∏•'],
    '‡∏•‡∏π‡∏Å': ['‡∏•'],
    '‡∏•‡∏≥‡πÑ‡∏¢': ['‡∏•'],
    '‡∏•‡∏π‡∏Å‡∏ï‡∏∏‡πâ‡∏°': ['‡∏•'],
    '‡∏¢‡∏≤‡∏á': ['‡∏¢'],
    '‡∏¢‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ': ['‡∏¢'],
    '‡∏¢‡∏≥': ['‡∏¢'],
    '‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞': ['‡∏¢'],
    '‡∏¢‡∏Å': ['‡∏¢'],
    '‡∏¢‡∏≠‡∏°': ['‡∏¢'],
    '‡∏¢‡∏¥‡πâ‡∏°': ['‡∏¢'],
    '‡∏¢‡∏≤‡∏ô': ['‡∏¢'],
    '‡∏¢‡∏≤‡∏ß': ['‡∏¢'],
    '‡∏¢‡πà‡∏≠‡∏¢': ['‡∏¢'],
    '‡∏¢‡∏∑‡∏°': ['‡∏¢'],
    '‡∏¢‡∏∏‡∏ó‡∏ò': ['‡∏¢'],
    '‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠': ['‡∏¢'],
    '‡∏¢‡∏±‡∏Å‡∏©‡πå': ['‡∏¢'],
    '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å': ['‡∏¢'],
    '‡πÇ‡∏¢‡∏Å‡∏¢‡πâ‡∏≤‡∏¢': ['‡∏¢'],
    '‡∏¢‡∏≤‡∏Å': ['‡∏¢'],
    '‡πÇ‡∏¢‡∏Å': ['‡∏¢'],
    '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ': ['‡∏¢'],
    '‡∏¢‡∏¥‡πà‡∏á': ['‡∏¢'],
    '‡∏¢‡∏∏‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°': ['‡∏¢'],
    '‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô': ['‡∏¢'],
    '‡∏¢‡∏¥‡πà‡∏á‡∏¢‡∏á': ['‡∏¢'],
    '‡∏¢‡∏∑‡∏ô': ['‡∏¢'],
    '‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà': ['‡∏¢'],
    '‡∏¢‡∏±‡∏Å': ['‡∏¢'],
    '‡∏¢‡∏≤‡∏¢': ['‡∏¢'],
    '‡∏¢‡∏≤‡∏ß‡∏ô‡∏≤‡∏ô': ['‡∏¢'],
    '‡∏¢‡∏∏‡∏ó‡∏ò‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå': ['‡∏¢'],
    '‡∏¢‡∏±‡∏î': ['‡∏¢'],
  };

  List<String> selectedLetters = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°
  List<String> selectedWordsDisplay = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  String input = ''; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î
  String currentWord = ''; // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô
  final List<String> validStartingLetters = [
    '‡∏Å',
    '‡∏Ç',
    '‡∏Ñ',
    '‡∏á',
    '‡∏à',
    '‡∏£',
    '‡∏•',
    '‡∏¢'
  ];
  final List<String> options = ['‡∏Å', '‡∏Ç', '‡∏Ñ', '‡∏á', '‡∏à', '‡∏£', '‡∏•', '‡∏¢'];

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  bool isTestRunning = false;

  @override
  void initState() {
    super.initState();
    _selectRandomLetters();
  }

  void _selectRandomLetters() {
    Random random = Random();
    selectedLetters.clear();
    selectedWordsDisplay.clear();
    List<String> allWords = wordMap.keys
        .where((word) => validStartingLetters
            .contains(word[0])) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        .toList();

    for (int i = 0; i < 5; i++) {
      String word = allWords[random.nextInt(allWords.length)];
      selectedLetters.add(word[0]); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥
      selectedWordsDisplay.add(word); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡∏°‡∏≤
    }
  }

  void _handleButtonPress(String buttonText) {
    setState(() {
      input += buttonText; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    });
  }

  void _checkAnswer() {
  String correctAnswer = selectedLetters.join('');
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô console
  print('‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å: $input');
  print('‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: $correctAnswer');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
  if (input == correctAnswer) {
    print('‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á üéâ');
  } else {
    print('‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î ‚ùå');
  }

  // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  setState(() {
    input = ''; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  });
}
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  void _startTest() async {
    setState(() {
      isTestRunning = true;
    });

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÇ‡∏î‡∏¢‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 12 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    for (var word in selectedWordsDisplay) {
      setState(() {
        currentWord = word; // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°
      });

      await Future.delayed(Duration(seconds: 3)); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 12 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }

    setState(() {
      isTestRunning = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Container(
          width: 1366,
          height: 1024,
          decoration: const BoxDecoration(
            color: Color(0xffe5f5f8), // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
          ),
          child: Stack(
            children: [
              // Header Section
              Positioned(
                top: 0,
                child: Container(
                  width: 1366,
                  height: 143,
                  color: const Color(0xff095d7e),
                  padding:
                      const EdgeInsets.symmetric(horizontal: 16, vertical: 20),
                  child: Row(
                    children: [
                      Image.asset(
                        'images/image_317526.png',
                        width: 100,
                        height: 100,
                      ),
                      const SizedBox(width: 16),
                      const Expanded(
                        child: Text(
                          'MoCA Check \nAssessment',
                          style: TextStyle(
                            fontSize: 36,
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              // Instruction Section
              Positioned(
                top: 160,
                left: 64,
                right: 64,
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: const Color(0xff14967f),
                    borderRadius: BorderRadius.circular(57),
                  ),
                  child: const Center(
                    child: Text(
                      '‡∏à‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô',
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 24,
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ),

              // Main Content Section
              Positioned(
                top: 280,
                left: 64,
                right: 64,
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    border:
                        Border.all(color: const Color(0xff000000), width: 1),
                    borderRadius: BorderRadius.circular(28),
                  ),
                  child: Column(
                    children: [
                      Text("‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°: $currentWord"), // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°
                      const SizedBox(height: 20),
                      Text("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: $input"),
                      const SizedBox(height: 20),
                      Wrap(
                        spacing: 8.0,
                        runSpacing: 8.0,
                        children: options.map((letter) {
                          return ElevatedButton(
                            onPressed: () => _handleButtonPress(letter),
                            child: Text(letter),
                            style: ElevatedButton.styleFrom(
                              foregroundColor: Colors.white,
                              backgroundColor: Colors.purple,
                            ),
                          );
                        }).toList(),
                      ),
                      const SizedBox(height: 20),
                      ElevatedButton(
                        onPressed: _startTest, // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.purple,
                        ),
                        child: const Text("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
                        ,style: TextStyle(color: Colors.white)),
                      ),
                    ],
                  ),
                ),
              ),

              // Footer Section
              Positioned(
                bottom: 0,
                child: Container(
                  width: 1366,
                  height: 161,
                  decoration: const BoxDecoration(
                    color: Color(0xff14967f),
                    borderRadius:
                        BorderRadius.vertical(top: Radius.circular(30)),
                  ),
                  padding:
                      const EdgeInsets.symmetric(horizontal: 64, vertical: 20),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      _buildFooterButton('‡∏≠‡∏≠‡∏Å', Colors.red),
                      _buildFooterButton('‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ', Colors.purple),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFooterButton(String text, Color color) {
    return ElevatedButton(
      style: ElevatedButton.styleFrom(
        backgroundColor: color,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(19),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 16),
      ),
      onPressed: () {
        if (text == '‡∏≠‡∏≠‡∏Å') {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (context) => const CodiaPage(), // Navigate to CodiaPage
            ),
          );
        } else if (text == '‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≠‡πÑ‡∏õ') {
          _checkAnswer();
          Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) =>
                  const CodiaPage15(), // Navigate to the next page
            ),
          );
        }
      },
      child: Text(
        text,
        style: const TextStyle(
          fontSize: 20,
          color: Colors.white,
        ),
      ),
    );
  }
}
